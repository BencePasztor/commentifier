generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  email     String    @unique
  username  String    @unique
  password  String
  avatar    String?
  posts     Post[]
  comment   Comment[]
  upvote    Upvote[]
}

model Post {
  id          Int       @id @default(autoincrement())
  sourceUrl   String    @db.VarChar(2083)
  title       String    @db.VarChar(150)
  slug        String    @db.VarChar(150)
  description String    @db.VarChar(300)
  image       String?
  user        User      @relation(fields: [createdBy], references: [id])
  createdAt   DateTime  @default(now())
  createdBy   Int
  comment     Comment[]
}

model Comment {
  id        Int       @id @default(autoincrement())
  content   String    @db.Text
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId    Int
  parentId  Int?
  parent    Comment?  @relation("CommentReply", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  replies   Comment[] @relation("CommentReply")
  user      User      @relation(fields: [createdBy], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime  @default(now())
  createdBy Int
  upvote    Upvote[]
}

model Upvote {
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    Int
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  commentId Int
  createdAt DateTime @default(now())

  @@id([userId, commentId])
}
